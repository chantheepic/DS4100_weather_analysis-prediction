theme(axis.text.x = element_text(angle = 90, hjust = 1))
cor(kaggle_data$humidity, kaggle_data$pressure)
cor(kaggle_data$humidity, rainObs)
cor(kaggle_data$pressure, rainObs)
cor(kaggle_data$temperature, rainObs)
cor(months$date, kaggle_data$humidity)
cor(months$da, rainObs)
cor(kaggle_data$humidity, kaggle_data$pressure)
cor(kaggle_data$humidity, rainObs)
cor(kaggle_data$pressure, rainObs)
cor(kaggle_data$temperature, rainObs)
cor(months$date, kaggle_data$humidity)
cor(months$da, rainObs)
cor(months$date, kaggle_data$humidity)
cor(months$date, rainObs)
cor(months$date, rainObs)
# In gneral, there seems to be little correlation between the different variables stored in the kaggle dataset.
cor(kaggle_data$humidity, kaggle_data$pressure)
cor(kaggle_data$humidity, rainObs)
cor(kaggle_data$pressure, rainObs)
cor(kaggle_data$temperature, rainObs)
db <- dbConnect(SQLite(), dbname="projdb.sqlite")
sinceJan1 <- function(date){
iv <- interval(as.Date(paste(year(date), "01", "01", sep = "-")), date)
iv <- iv %/% days(1)
return(iv)
}
kaggle_data <- dbGetQuery(db, "SELECT date, AVG(temperature), AVG(humidity), AVG(pressure), AVG(wind_direction), AVG(wind_speed) FROM k_weather_summary GROUP BY date")
kaggle_data["date"] <- lapply(kaggle_data["date"], function(x) as.Date(x, format = "%y-%m-%d"))
kaggle_data <- mutate(kaggle_data, days_since_jan1 = sinceJan1(date))
noaa_data <- dbGetQuery(db, "SELECT * FROM n_weather_summary")
noaa_data["date"] <- lapply(noaa_data["date"], function(x) as.Date(x, format = "%Y-%m-%d"))
obs <- dbGetQuery(db, "SELECT date, observation, COUNT(observation) FROM k_weather_summary GROUP BY date, observation")
TMAX <- spread(noaa_data[c("date", "station", "TMAX")], station, TMAX)
TMAX$date <- NULL
TMAX <- slice(TMAX, 1:length(kaggle_data$date))
TMIN <- spread(noaa_data[c("date", "station", "TMIN")], station, TMIN)
TMIN$date <- NULL
TMIN <- slice(TMIN, 1:length(kaggle_data$date))
PRCP <- spread(noaa_data[c("date", "station", "PRCP")], station, PRCP)
PRCP$date <-NULL
PRCP <- slice(PRCP, 1:length(kaggle_data$date))
weather_observation <- group_by(obs, date) %>% slice(which.max(`COUNT(observation)`))
Amelia::missmap(kaggle_data)
Amelia::missmap(TMAX)
Amelia::missmap(TMIN)
Amelia::missmap(PRCP)
Amelia::missmap(weather_observation)
removeInaccurateCol <- function(df){
missingValIndex <- sapply(df, function(x) which(is.na(x), arr.ind = TRUE))
missingValCount <- sapply(missingValIndex, function(x) length(x))
inaccurateCols <- names(missingValCount[missingValCount/length(df[,1]) > 0.05])
df2 <- df
df2[inaccurateCols] <- NULL
return(df2)
}
TMAX <- removeInaccurateCol(TMAX)
TMIN <- removeInaccurateCol(TMIN)
PRCP <- removeInaccurateCol(PRCP)
Amelia::missmap(TMAX)
Amelia::missmap(TMIN)
Amelia::missmap(PRCP)
model_knn1 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=1)
library(class)
model_knn1 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=1)
regression_data_set <- data.frame("days_since_jan1" = kaggle_data$days_since_jan1, "pressure" = kaggle_data$`AVG(pressure)`, "wind_direction" = kaggle_data$`AVG(wind_direction)`, "wind_speed" = kaggle_data$`AVG(wind_speed)`, "TMAX" = TMAX, "TMIN" = TMIN, "PRCP" = PRCP, "observation" = weather_observation$observation)
Amelia::missmap(regression_data_set)
regression_training <- sample_frac(regression_data_set, 0.7)
regression_test <- setdiff(regression_data_set, regression_training)
library(class)
model_knn1 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=1)
regression_data_set <- data.frame("days_since_jan1" = kaggle_data$days_since_jan1, "pressure" = kaggle_data$`AVG(pressure)`, "wind_direction" = kaggle_data$`AVG(wind_direction)`, "wind_speed" = kaggle_data$`AVG(wind_speed)`, "TMAX" = TMAX, "TMIN" = TMIN, "PRCP" = PRCP, "observation" = weather_observation$observation)
Amelia::missmap(regression_data_set)
regression_training <- sample_frac(regression_data_set, 0.7)
regression_test <- setdiff(regression_data_set, regression_training)
install.packages("e1071")
install.packages("randomForest")
library(e1071)
library(randomForest)
model_rf <- randomForest(observation~., ntree=4, data = regression_training)
db <- dbConnect(SQLite(), dbname="projdb.sqlite")
sinceJan1 <- function(date){
iv <- interval(as.Date(paste(year(date), "01", "01", sep = "-")), date)
iv <- iv %/% days(1)
return(iv)
}
kaggle_data <- dbGetQuery(db, "SELECT date, AVG(temperature), AVG(humidity), AVG(pressure), AVG(wind_direction), AVG(wind_speed) FROM k_weather_summary GROUP BY date")
kaggle_data["date"] <- lapply(kaggle_data["date"], function(x) as.Date(x, format = "%y-%m-%d"))
kaggle_data <- mutate(kaggle_data, days_since_jan1 = sinceJan1(date))
noaa_data <- dbGetQuery(db, "SELECT * FROM n_weather_summary")
noaa_data["date"] <- lapply(noaa_data["date"], function(x) as.Date(x, format = "%Y-%m-%d"))
obs <- dbGetQuery(db, "SELECT date, observation, COUNT(observation) FROM k_weather_summary GROUP BY date, observation")
TMAX <- spread(noaa_data[c("date", "station", "TMAX")], station, TMAX)
TMAX$date <- NULL
TMAX <- slice(TMAX, 1:length(kaggle_data$date))
TMIN <- spread(noaa_data[c("date", "station", "TMIN")], station, TMIN)
TMIN$date <- NULL
TMIN <- slice(TMIN, 1:length(kaggle_data$date))
PRCP <- spread(noaa_data[c("date", "station", "PRCP")], station, PRCP)
PRCP$date <-NULL
PRCP <- slice(PRCP, 1:length(kaggle_data$date))
weather_observation <- group_by(obs, date) %>% slice(which.max(`COUNT(observation)`))
Amelia::missmap(kaggle_data)
Amelia::missmap(TMAX)
Amelia::missmap(TMIN)
Amelia::missmap(PRCP)
Amelia::missmap(weather_observation)
removeInaccurateCol <- function(df){
missingValIndex <- sapply(df, function(x) which(is.na(x), arr.ind = TRUE))
missingValCount <- sapply(missingValIndex, function(x) length(x))
inaccurateCols <- names(missingValCount[missingValCount/length(df[,1]) > 0.05])
df2 <- df
df2[inaccurateCols] <- NULL
return(df2)
}
TMAX <- removeInaccurateCol(TMAX)
TMIN <- removeInaccurateCol(TMIN)
PRCP <- removeInaccurateCol(PRCP)
Amelia::missmap(TMAX)
Amelia::missmap(TMIN)
Amelia::missmap(PRCP)
replaceNAByRow <- function(array){
rowMean <- mean(as.vector(t(array)), na.rm = TRUE)
d <- array
d[is.na(d)] <- rowMean
return(d)
}
for(rowNum in c(1:length(TMAX$`GHCND:USC00190120`))){
TMAX[rowNum,] <- replaceNAByRow(TMAX[rowNum,])
}
for(rowNum in c(1:length(TMIN$`GHCND:USC00190120`))){
TMIN[rowNum,] <- replaceNAByRow(TMIN[rowNum,])
}
for(rowNum in c(1:length(PRCP$`GHCND:USC00190120`))){
PRCP[rowNum,] <- replaceNAByRow(PRCP[rowNum,])
}
Amelia::missmap(TMAX)
Amelia::missmap(TMIN)
Amelia::missmap(PRCP)
regression_data_set <- data.frame("days_since_jan1" = kaggle_data$days_since_jan1, "pressure" = kaggle_data$`AVG(pressure)`, "wind_direction" = kaggle_data$`AVG(wind_direction)`, "wind_speed" = kaggle_data$`AVG(wind_speed)`, "TMAX" = TMAX, "TMIN" = TMIN, "PRCP" = PRCP, "observation" = weather_observation$observation)
Amelia::missmap(regression_data_set)
regression_training <- sample_frac(regression_data_set, 0.7)
regression_test <- setdiff(regression_data_set, regression_training)
install.packages("e1071")
install.packages("randomForest")
library(e1071)
library(randomForest)
model_rf <- randomForest(observation~., ntree=4, data = regression_training)
plot(model_rf)
print(model_rf)
model_rf2 <- randomForest(observation~., ntree=50, data = regression_training)
plot(model_rf2)
print(model_rf2)
model_rf3 <- randomForest(observation~., ntree=100, data = regression_training)
plot(model_rf3)
print(model_rf3)
install.packages("e1071")
install.packages("randomForest")
model_rf4 <- randomForest(observation~., ntree=200, data = regression_training)
install.packages("randomForest")
plot(model_rf4)
print(model_rf4)
varImpPlot(model_rf3, sort = T, n.var=10, main="Variables by importance")
preds_rf <- predict(model_rf3, regression_test)
predicted_rf <- data.frame(regression_test$observation,preds_rf)
rf_accuracy <- (predicted_rf$regression_test.observation == predicted_rf$preds_rf)
rf_accuracy <- length(rf_accuracy[(rf_accuracy == TRUE)]) / length(rf_accuracy)
rf_accuracy
library(class)
model_knn1 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=1)
model_knn2 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=3)
model_knn3 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=5)
predicted_knn <- data.frame(regression_test$observation,model_knn1)
knn_accuracy <- (predicted_knn$regression_test.observation == predicted_knn$model_knn1)
knn_accuracy <- length(knn_accuracy[(knn_accuracy == TRUE)]) / length(knn_accuracy)
predicted_knn2 <- data.frame(regression_test$observation,model_knn2)
knn_accuracy2 <- (predicted_knn$regression_test.observation == predicted_knn$model_knn2)
knn_accuracy2 <- length(knn_accuracy[(knn_accuracy == TRUE)]) / length(knn_accuracy)
predicted_knn3 <- data.frame(regression_test$observation,model_knn3)
knn_accuracy3 <- (predicted_knn$regression_test.observation == predicted_knn$model_knn3)
knn_accuracy3 <- length(knn_accuracy[(knn_accuracy == TRUE)]) / length(knn_accuracy)
knn_accuracy1
library(class)
model_knn1 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=1)
model_knn2 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=3)
model_knn3 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=5)
predicted_knn1 <- data.frame(regression_test$observation,model_knn1)
knn_accuracy1 <- (predicted_knn$regression_test.observation == predicted_knn$model_knn1)
knn_accuracy1 <- length(knn_accuracy[(knn_accuracy == TRUE)]) / length(knn_accuracy)
predicted_knn2 <- data.frame(regression_test$observation,model_knn2)
knn_accuracy2 <- (predicted_knn$regression_test.observation == predicted_knn$model_knn2)
knn_accuracy2 <- length(knn_accuracy[(knn_accuracy == TRUE)]) / length(knn_accuracy)
predicted_knn3 <- data.frame(regression_test$observation,model_knn3)
knn_accuracy3 <- (predicted_knn$regression_test.observation == predicted_knn$model_knn3)
knn_accuracy3 <- length(knn_accuracy[(knn_accuracy == TRUE)]) / length(knn_accuracy)
knn_accuracy1
knn_accuracy2
knn_accuracy3
library(class)
model_knn1 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=1)
model_knn2 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=3)
model_knn3 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=5)
predicted_knn1 <- data.frame(regression_test$observation,model_knn1)
knn_accuracy1 <- (predicted_knn1$regression_test.observation == predicted_knn1$model_knn1)
knn_accuracy1 <- length(knn_accuracy1[(knn_accuracy1 == TRUE)]) / length(knn_accuracy1)
predicted_knn2 <- data.frame(regression_test$observation,model_knn2)
knn_accuracy2 <- (predicted_knn2$regression_test.observation == predicted_knn2$model_knn2)
knn_accuracy2 <- length(knn_accuracy2[(knn_accuracy2 == TRUE)]) / length(knn_accuracy2)
predicted_knn3 <- data.frame(regression_test$observation,model_knn3)
knn_accuracy3 <- (predicted_knn3$regression_test.observation == predicted_knn3$model_knn3)
knn_accuracy3 <- length(knn_accuracy3[(knn_accuracy3 == TRUE)]) / length(knn_accuracy3)
knn_accuracy1
knn_accuracy2
knn_accuracy3
library(class)
model_knn1 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=1)
model_knn2 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=3)
model_knn3 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=5)
predicted_knn1 <- data.frame(regression_test$observation,model_knn1)
knn_accuracy1 <- (predicted_knn1$regression_test.observation == predicted_knn1$model_knn1)
knn_accuracy1 <- length(knn_accuracy1[(knn_accuracy1 == TRUE)]) / length(knn_accuracy1)
predicted_knn2 <- data.frame(regression_test$observation,model_knn2)
knn_accuracy2 <- (predicted_knn2$regression_test.observation == predicted_knn2$model_knn2)
knn_accuracy2 <- length(knn_accuracy2[(knn_accuracy2 == TRUE)]) / length(knn_accuracy2)
predicted_knn3 <- data.frame(regression_test$observation,model_knn3)
knn_accuracy3 <- (predicted_knn3$regression_test.observation == predicted_knn3$model_knn3)
knn_accuracy3 <- length(knn_accuracy3[(knn_accuracy3 == TRUE)]) / length(knn_accuracy3)
knn_accuracy1
knn_accuracy2
knn_accuracy3
library(class)
model_knn1 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=1)
model_knn2 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=3)
model_knn3 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=5)
predicted_knn1 <- data.frame(regression_test$observation,model_knn1)
knn_accuracy1 <- (predicted_knn1$regression_test.observation == predicted_knn1$model_knn1)
knn_accuracy1 <- length(knn_accuracy1[(knn_accuracy1 == TRUE)]) / length(knn_accuracy1)
predicted_knn2 <- data.frame(regression_test$observation,model_knn2)
knn_accuracy2 <- (predicted_knn2$regression_test.observation == predicted_knn2$model_knn2)
knn_accuracy2 <- length(knn_accuracy2[(knn_accuracy2 == TRUE)]) / length(knn_accuracy2)
predicted_knn3 <- data.frame(regression_test$observation,model_knn3)
knn_accuracy3 <- (predicted_knn3$regression_test.observation == predicted_knn3$model_knn3)
knn_accuracy3 <- length(knn_accuracy3[(knn_accuracy3 == TRUE)]) / length(knn_accuracy3)
knn_accuracy1
knn_accuracy2
knn_accuracy3
library(class)
model_knn1 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=1)
model_knn2 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=5)
model_knn3 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=9)
predicted_knn1 <- data.frame(regression_test$observation,model_knn1)
knn_accuracy1 <- (predicted_knn1$regression_test.observation == predicted_knn1$model_knn1)
knn_accuracy1 <- length(knn_accuracy1[(knn_accuracy1 == TRUE)]) / length(knn_accuracy1)
predicted_knn2 <- data.frame(regression_test$observation,model_knn2)
knn_accuracy2 <- (predicted_knn2$regression_test.observation == predicted_knn2$model_knn2)
knn_accuracy2 <- length(knn_accuracy2[(knn_accuracy2 == TRUE)]) / length(knn_accuracy2)
predicted_knn3 <- data.frame(regression_test$observation,model_knn3)
knn_accuracy3 <- (predicted_knn3$regression_test.observation == predicted_knn3$model_knn3)
knn_accuracy3 <- length(knn_accuracy3[(knn_accuracy3 == TRUE)]) / length(knn_accuracy3)
knn_accuracy1
knn_accuracy2
knn_accuracy3
# The variables that had the greatest impact on prediction is shown below
varImpPlot(model_rf3, sort = T, n.var=10, main="Variables by importance")
rf_accuracy
# final missmap to check if anything is missing.
Amelia::missmap(regression_data_set, main = "Regression dataset Missmap")
# The missmaps show that there is a significant amount of missing informatioin in the NOAA dataset.
Amelia::missmap(kaggle_data, main = "missmap for kaggle dataset (without 'observation')")
Amelia::missmap(PRCP, main = "missmap for Kaggle 'observation'")
Amelia::missmap(PRCP, main = "missmap for Kaggle 'observation'")
Amelia::missmap(weather_observation)
Amelia::missmap(PRCP, main = "missmap for NOAA PRCP data")
# missmaps show that all data is now present. At this pont, all data sets have been standardized and can be merged and used for modelling.
Amelia::missmap(TMAX, main = "TMAX final clean")
# missmaps show that all data is now present. At this pont, all data sets have been standardized and can be merged and used for modelling.
Amelia::missmap(TMAX, main = "TMAX final clean")
Amelia::missmap(TMIN, main = "TMIN final clean")
Amelia::missmap(PRCP, main = "PRCP final clean")
# The missmaps show a greatly reduced number of missing information.
Amelia::missmap(TMAX, main = "TMAX initial clean")
# The missmaps show a greatly reduced number of missing information.
Amelia::missmap(TMAX, main = "TMAX initial clean")
Amelia::missmap(TMIN, main = "TMIN initial clean")
Amelia::missmap(PRCP, main = "PRCP initial clean")
# The missmaps show that there is a significant amount of missing informatioin in the NOAA dataset.
Amelia::missmap(kaggle_data, main = "missmap for kaggle dataset (without 'observation')")
# The missmaps show that there is a significant amount of missing informatioin in the NOAA dataset.
Amelia::missmap(kaggle_data, main = "missmap for kaggle dataset (without 'observation')")
Amelia::missmap(TMAX, main = "missmap for NOAA TMAX data")
Amelia::missmap(TMIN, main = "missmap for NOAA TMIN data")
Amelia::missmap(PRCP, main = "missmap for NOAA PRCP data")
Amelia::missmap(TMAX, main = "missmap for NOAA TMAX data")
Amelia::missmap(TMIN, main = "missmap for NOAA TMIN data")
Amelia::missmap(PRCP, main = "missmap for NOAA PRCP data")
Amelia::missmap(weather_observation,main = "missmap for Kaggle 'observation'")
# In this code block, the datasets are formatted and and shaped to be useful.
db <- dbConnect(SQLite(), dbname="projdb.sqlite")
Amelia::missmap(noaa_data, main = "NOAA data Missingness Map")
ggplot(data=rainObservation, aes(x=month, y=Freq, fill=year)) +
geom_bar(stat="identity") + ggtitle("Plot of length \n by dose") +
xlab("Dose (mg)") + ylab("Teeth length")
# This block of code is meant to explore the dataset and find patterns or correlations in the Kaggle dataset.
# It is possible to see that there is a lot of ouliers between the pressure and windspeed. This is not very surprising since wind is an irregular characteristic of weatehr and wind is generated by changes in pressure (which also has a lot of outliers). What is more surprising is that humidity shows less outliers than the precipitation data from the NOAA dataset. Perhaps there is not much correlation between rain, pressure, and humidity.
boxplot(scale(kaggle_data[c(3,4,5,7,8)]))
# At this point, objects from the workspace was cleared. Then, a missmap was created to find how much of the data imported was missing. This was done using a missmap
db <- dbConnect(SQLite(), dbname="projdb.sqlite")
noaa_data <- dbGetQuery(db, "SELECT * FROM n_weather_summary")
kaggle_data <- dbGetQuery(db, "SELECT * FROM k_weather_summary")
Amelia::missmap(noaa_data, main = "NOAA data Missingness Map")
Amelia::missmap(kaggle_data, main = "Kaggle data Missingness Map")
# looks like there are some missing information in the NOAA data.
# This block of code is meant to explore the dataset and find patterns or correlations in the Kaggle dataset.
# It is possible to see that there is a lot of ouliers between the pressure and windspeed. This is not very surprising since wind is an irregular characteristic of weatehr and wind is generated by changes in pressure (which also has a lot of outliers). What is more surprising is that humidity shows less outliers than the precipitation data from the NOAA dataset. Perhaps there is not much correlation between rain, pressure, and humidity.
boxplot(scale(kaggle_data[c(3,4,5,7,8)]))
# The graph below shows the frequency of rain, drizzle, or mist observations stacked by month. The summer months seem to show a slight increase in rain.
rainObs <- str_detect(kaggle_data$observation, "rain|drizzle|mist")
months <- lapply(kaggle_data["date"], function(x) month(as.Date(x, format = "%y-%m-%d")))
years <- lapply(kaggle_data["date"], function(x) year(as.Date(x, format = "%y-%m-%d")))
rainObservation <- data.frame("year" = years$date, "month" = months$date, "rain" = rainObs)
rainObservation <- filter(rainObservation, rain == TRUE)
rainObservation <- table(rainObservation)
rainObservation <- data.frame(rainObservation)
ggplot(data=rainObservation, aes(x=month, y=Freq, fill=year)) +
geom_bar(stat="identity") + ggtitle("Plot of length \n by dose") +
xlab("Dose (mg)") + ylab("Teeth length")
# The graph below shows the frequency of rain, drizzle, or mist observations grouped by month. There does not seem to be a increase or decrease in frequency of rain over the years, but once again, the summer months seem to show a slight increase in rain.
spreadDates <- paste(rainObservation$year,rainObservation$month)
rainObservationSpread <- data.frame("date" = spreadDates, "month" = as.integer(rainObservation$month), "Freq" = rainObservation$Freq)
ggplot(data=rainObservationSpread, aes(x=reorder(date,month), y=Freq, fill=-month)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Plot of length \n by dose") +
xlab("Dose (mg)") + ylab("Teeth length")
# In gneral, there seems to be little correlation between the different variables stored in the kaggle dataset.
cor(kaggle_data$humidity, kaggle_data$pressure)
cor(kaggle_data$humidity, rainObs)
cor(kaggle_data$pressure, rainObs)
# notable. Once again, temperature seems to have little correlation with rain. Which is strange since summeris warmer and has more rain...
cor(kaggle_data$temperature, rainObs)
# At this point, I would try to find correlations between the variables in the NOAA dataset and the Kaggle dataset but their dataframe formats are incompatible, data must first be further cleaned and integrated before weather modeling can occur.
# This block of code is meant to explore the dataset and find patterns or correlations in the Kaggle dataset.
# It is possible to see that there is a lot of ouliers between the pressure and windspeed. This is not very surprising since wind is an irregular characteristic of weatehr and wind is generated by changes in pressure (which also has a lot of outliers). What is more surprising is that humidity shows less outliers than the precipitation data from the NOAA dataset. Perhaps there is not much correlation between rain, pressure, and humidity.
boxplot(scale(kaggle_data[c(3,4,5,7,8)]))
# The graph below shows the frequency of rain, drizzle, or mist observations stacked by month. The summer months seem to show a slight increase in rain.
rainObs <- str_detect(kaggle_data$observation, "rain|drizzle|mist")
months <- lapply(kaggle_data["date"], function(x) month(as.Date(x, format = "%y-%m-%d")))
years <- lapply(kaggle_data["date"], function(x) year(as.Date(x, format = "%y-%m-%d")))
rainObservation <- data.frame("year" = years$date, "month" = months$date, "rain" = rainObs)
rainObservation <- filter(rainObservation, rain == TRUE)
rainObservation <- table(rainObservation)
rainObservation <- data.frame(rainObservation)
ggplot(data=rainObservation, aes(x=month, y=Freq, fill=year)) +
geom_bar(stat="identity") + ggtitle("Frequency of rain, drizzle, or mist observation stacked by month") +
xlab("Date") + ylab("Observation Frequency")
# The graph below shows the frequency of rain, drizzle, or mist observations grouped by month. There does not seem to be a increase or decrease in frequency of rain over the years, but once again, the summer months seem to show a slight increase in rain.
spreadDates <- paste(rainObservation$year,rainObservation$month)
rainObservationSpread <- data.frame("date" = spreadDates, "month" = as.integer(rainObservation$month), "Freq" = rainObservation$Freq)
ggplot(data=rainObservationSpread, aes(x=reorder(date,month), y=Freq, fill=-month)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_bar(stat="identity") + ggtitle("Frequency of rain, drizzle, or mist observation grouped by month") +
xlab("Date") + ylab("Observation Frequency")
# In gneral, there seems to be little correlation between the different variables stored in the kaggle dataset.
cor(kaggle_data$humidity, kaggle_data$pressure)
cor(kaggle_data$humidity, rainObs)
cor(kaggle_data$pressure, rainObs)
# notable. Once again, temperature seems to have little correlation with rain. Which is strange since summeris warmer and has more rain...
cor(kaggle_data$temperature, rainObs)
# At this point, I would try to find correlations between the variables in the NOAA dataset and the Kaggle dataset but their dataframe formats are incompatible, data must first be further cleaned and integrated before weather modeling can occur.
# It is possible to see that there is a lot of ouliers between the pressure and windspeed. This is not very surprising since wind is an irregular characteristic of weatehr and wind is generated by changes in pressure (which also has a lot of outliers). What is more surprising is that humidity shows less outliers than the precipitation data from the NOAA dataset. Perhaps there is not much correlation between rain, pressure, and humidity.
boxplot(scale(kaggle_data[c(3,4,5,7,8)]), main = "Normalized boxplot of the Kaggle dataset")
# This block of code is meant to explore the dataset and find patterns or correlations in the Kaggle dataset.
# It is possible to see that there is a lot of ouliers between the pressure and windspeed. This is not very surprising since wind is an irregular characteristic of weatehr and wind is generated by changes in pressure (which also has a lot of outliers). What is more surprising is that humidity shows less outliers than the precipitation data from the NOAA dataset. Perhaps there is not much correlation between rain, pressure, and humidity.
boxplot(scale(kaggle_data[c(3,4,5,7,8)]), main = "Normalized boxplot of the Kaggle dataset")
# The graph below shows the frequency of rain, drizzle, or mist observations stacked by month. The summer months seem to show a slight increase in rain.
rainObs <- str_detect(kaggle_data$observation, "rain|drizzle|mist")
months <- lapply(kaggle_data["date"], function(x) month(as.Date(x, format = "%y-%m-%d")))
years <- lapply(kaggle_data["date"], function(x) year(as.Date(x, format = "%y-%m-%d")))
rainObservation <- data.frame("year" = years$date, "month" = months$date, "rain" = rainObs)
rainObservation <- filter(rainObservation, rain == TRUE)
rainObservation <- table(rainObservation)
rainObservation <- data.frame(rainObservation)
ggplot(data=rainObservation, aes(x=month, y=Freq, fill=year)) +
geom_bar(stat="identity") + ggtitle("Frequency of rain, drizzle, or mist observation stacked by month") +
xlab("Date") + ylab("Observation Frequency")
# The graph below shows the frequency of rain, drizzle, or mist observations grouped by month. There does not seem to be a increase or decrease in frequency of rain over the years, but once again, the summer months seem to show a slight increase in rain.
spreadDates <- paste(rainObservation$year,rainObservation$month)
rainObservationSpread <- data.frame("date" = spreadDates, "month" = as.integer(rainObservation$month), "Freq" = rainObservation$Freq)
ggplot(data=rainObservationSpread, aes(x=reorder(date,month), y=Freq, fill=-month)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_bar(stat="identity") + ggtitle("Frequency of rain, drizzle, or mist observation grouped by month") +
xlab("Date") + ylab("Observation Frequency")
# In gneral, there seems to be little correlation between the different variables stored in the kaggle dataset.
cor(kaggle_data$humidity, kaggle_data$pressure)
cor(kaggle_data$humidity, rainObs)
cor(kaggle_data$pressure, rainObs)
# notable. Once again, temperature seems to have little correlation with rain. Which is strange since summeris warmer and has more rain...
cor(kaggle_data$temperature, rainObs)
# At this point, I would try to find correlations between the variables in the NOAA dataset and the Kaggle dataset but their dataframe formats are incompatible, data must first be further cleaned and integrated before weather modeling can occur.
# This graph shows the max daily temperature data observed by the different stations over a span of 6 years. The correlation of temperature over time is quite evident. It would be awkward if it was warm during the summer.
ggplot(noaa_data, aes(x = date, y = TMAX, color = station)) +
geom_point() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Daily Max temperature observed by all weather stations in MA between 2012 and 2017") +
xlab("Date") + ylab("Observed Temperature in C")
library(ggplot2)
# This block of code is meant to explore the dataset and find patterns or correlations in the NOAA dataset.
# After normalizing the data, it is possible to see that the pricipitation data has lots of outliers. This is not surprising given that heavy pricipitation likely means that it's raining and rain is not a daily occurance.
boxplot(scale(noaa_data[3:5]), main = "Normalized boxplot of the NOAA dataset")
# This graph shows the max daily temperature data observed by the different stations over a span of 6 years. The correlation of temperature over time is quite evident. It would be awkward if it was warm during the summer.
ggplot(noaa_data, aes(x = date, y = TMAX, color = station)) +
geom_point() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Daily Max temperature observed by all weather stations in MA between 2012 and 2017") +
xlab("Date") + ylab("Observed Temperature in C")
# because the graph is quite big, it needed to be saved as a separate file
ggsave("TMAX.png", width = 100, height = 20, units = "cm")
ggsave("TMAX_detailed.png", width = 500, height = 20, units = "cm", limitsize = FALSE)
# This graph shows the precipitation data observed by the different stations over a span of 6 years. The correlation of pricipation over time is less clear, but there clearly are times where there is greater precipitation.
ggplot(noaa_data, aes(x = date, y = PRCP, color = station)) +
geom_point() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Daily Precipitation observed by all weather stations in MA between 2012 and 2017") +
xlab("Date") + ylab("Recorded Pricipitation in/24hr")
# because the graph is quite big, it needed to be saved as a separate file
ggsave("PRCP.png", width = 100, height = 20, units = "cm")
ggsave("PRCP_detailed.png", width = 500, height = 20, units = "cm", limitsize = FALSE)
noaa_na_removed <- na.omit(noaa_data)
# Correlation between Max and Min daily temperatures, not surprisingly, there is a correlation.
cor(noaa_na_removed$TMAX, noaa_na_removed$TMIN)
# Correlation between Max Precipitation and Temperature, there does not seem to be a significant correlation.
cor(noaa_na_removed$TMAX, noaa_na_removed$PRCP)
# Correlation between Min Precipitation and Temperature, there does not seem to be a significant correlation.
cor(noaa_na_removed$TMIN, noaa_na_removed$PRCP)
# This block of code is meant to explore the dataset and find patterns or correlations in the Kaggle dataset.
# It is possible to see that there is a lot of ouliers between the pressure and windspeed. This is not very surprising since wind is an irregular characteristic of weatehr and wind is generated by changes in pressure (which also has a lot of outliers). What is more surprising is that humidity shows less outliers than the precipitation data from the NOAA dataset. Perhaps there is not much correlation between rain, pressure, and humidity.
boxplot(scale(kaggle_data[c(3,4,5,7,8)]), main = "Normalized boxplot of the Kaggle dataset")
# The graph below shows the frequency of rain, drizzle, or mist observations stacked by year. The summer months seem to show a slight increase in rain.
rainObs <- str_detect(kaggle_data$observation, "rain|drizzle|mist")
months <- lapply(kaggle_data["date"], function(x) month(as.Date(x, format = "%y-%m-%d")))
years <- lapply(kaggle_data["date"], function(x) year(as.Date(x, format = "%y-%m-%d")))
rainObservation <- data.frame("year" = years$date, "month" = months$date, "rain" = rainObs)
rainObservation <- filter(rainObservation, rain == TRUE)
rainObservation <- table(rainObservation)
rainObservation <- data.frame(rainObservation)
ggplot(data=rainObservation, aes(x=month, y=Freq, fill=year)) +
geom_bar(stat="identity") +
ggtitle("Frequency of rain, drizzle, or mist observation stacked by year") +
xlab("Date") + ylab("Observation Frequency")
# The graph below shows the frequency of rain, drizzle, or mist observations grouped by year. There does not seem to be a increase or decrease in frequency of rain over the years, but once again, the summer months seem to show a slight increase in rain.
spreadDates <- paste(rainObservation$year,rainObservation$month)
rainObservationSpread <- data.frame("date" = spreadDates, "month" = as.integer(rainObservation$month), "Freq" = rainObservation$Freq)
ggplot(data=rainObservationSpread, aes(x=reorder(date,month), y=Freq, fill=-month)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_bar(stat="identity") +
ggtitle("Frequency of rain, drizzle, or mist observation grouped by year") +
xlab("Date") + ylab("Observation Frequency")
# In gneral, there seems to be little correlation between the different variables stored in the kaggle dataset.
cor(kaggle_data$humidity, kaggle_data$pressure)
cor(kaggle_data$humidity, rainObs)
cor(kaggle_data$pressure, rainObs)
# notable. Once again, temperature seems to have little correlation with rain. Which is strange since summeris warmer and has more rain...
cor(kaggle_data$temperature, rainObs)
# At this point, I would try to find correlations between the variables in the NOAA dataset and the Kaggle dataset but their dataframe formats are incompatible, data must first be further cleaned and integrated before weather modeling can occur.
install.packages("e1071")
install.packages("randomForest")
library(e1071)
library(randomForest)
# First modelling uses a Random Forest scheme. Tested for ntree = 4, 50, 100, 200
model_rf <- randomForest(observation~., ntree=4, data = regression_training)
plot(model_rf)
print(model_rf)
model_rf2 <- randomForest(observation~., ntree=50, data = regression_training)
install.packages("e1071")
install.packages("randomForest")
plot(model_rf2)
print(model_rf2)
model_rf3 <- randomForest(observation~., ntree=100, data = regression_training)
plot(model_rf3)
print(model_rf3)
model_rf4 <- randomForest(observation~., ntree=200, data = regression_training)
plot(model_rf4)
print(model_rf4)
# At ntree = 100, there is deminishing returns for fitting. As such, to prevent potential overfitting, ntree was chosen as 100.
# The variables that had the greatest impact on prediction is shown below.
varImpPlot(model_rf3, sort = T, n.var=10, main="Variables by importance")
# The resultant model was tested using the testing data set.
preds_rf <- predict(model_rf3, regression_test)
predicted_rf <- data.frame(regression_test$observation,preds_rf)
rf_accuracy <- (predicted_rf$regression_test.observation == predicted_rf$preds_rf)
rf_accuracy <- length(rf_accuracy[(rf_accuracy == TRUE)]) / length(rf_accuracy)
# At an accuracy of 87%, the predictions weren't too bad.
rf_accuracy
library(class)
# Second modelling uses a KNN scheme. Tested for k = 1, 5, 9
model_knn1 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=1)
model_knn2 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=5)
model_knn3 <- knn(regression_training[c(1:157)], regression_test[c(1:157)], regression_training$observation, k=9)
predicted_knn1 <- data.frame(regression_test$observation,model_knn1)
knn_accuracy1 <- (predicted_knn1$regression_test.observation == predicted_knn1$model_knn1)
knn_accuracy1 <- length(knn_accuracy1[(knn_accuracy1 == TRUE)]) / length(knn_accuracy1)
predicted_knn2 <- data.frame(regression_test$observation,model_knn2)
knn_accuracy2 <- (predicted_knn2$regression_test.observation == predicted_knn2$model_knn2)
knn_accuracy2 <- length(knn_accuracy2[(knn_accuracy2 == TRUE)]) / length(knn_accuracy2)
predicted_knn3 <- data.frame(regression_test$observation,model_knn3)
knn_accuracy3 <- (predicted_knn3$regression_test.observation == predicted_knn3$model_knn3)
knn_accuracy3 <- length(knn_accuracy3[(knn_accuracy3 == TRUE)]) / length(knn_accuracy3)
# The accuracy seems to be highest when the k value is at 1 at 83% accuracy. This is quite strange. Perhaps the datasets have to be furtehr processed to be more accurate.
knn_accuracy1
knn_accuracy2
knn_accuracy3
# comparing the two models above, it seems that given a host of weather variables, Random Forest was marginally better at predicting the weather.
